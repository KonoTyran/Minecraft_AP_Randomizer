package gg.archipelago.aprandomizer.common.commands;import com.mojang.brigadier.CommandDispatcher;import com.mojang.brigadier.context.CommandContext;import gg.archipelago.aprandomizer.APRandomizer;import gg.archipelago.aprandomizer.common.Utils.Utils;import gg.archipelago.aprandomizer.managers.advancementmanager.CustomAdvancementHandler;import gg.archipelago.client.ClientStatus;import net.minecraft.commands.CommandSourceStack;import net.minecraft.commands.Commands;import net.minecraft.core.BlockPos;import net.minecraft.network.chat.Component;import net.minecraft.resources.ResourceLocation;import net.minecraft.server.MinecraftServer;import net.minecraft.server.level.ServerLevel;import net.minecraft.server.level.ServerPlayer;import net.minecraft.stats.Stats;import net.minecraft.world.item.ItemStack;import net.minecraft.world.level.GameRules;import net.minecraft.world.level.Level;import net.minecraft.world.level.block.Block;import net.minecraft.world.level.block.Blocks;import net.minecraft.world.level.border.WorldBorder;import net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate;import net.minecraftforge.event.RegisterCommandsEvent;import net.minecraftforge.eventbus.api.SubscribeEvent;import net.minecraftforge.fml.common.Mod;import org.apache.logging.log4j.LogManager;import org.apache.logging.log4j.Logger;@Mod.EventBusSubscriberpublic class StartCommand {    // Directly reference a log4j logger.    private static final Logger LOGGER = LogManager.getLogger();    //build our command structure and submit it    public static void Register(CommandDispatcher<CommandSourceStack> dispatcher) {        dispatcher.register(                Commands.literal("start") //base slash command is "start"                        .executes(context -> Start(context, false))        );        dispatcher.register(                Commands.literal("forcestart") //base slash command is "forcestart"                        .executes(context -> Start(context, true))        );    }    private static int Start(CommandContext<CommandSourceStack> commandSourceCommandContext, boolean force) {        if (!APRandomizer.getAP().isConnected() && !force) {            commandSourceCommandContext.getSource().sendFailure(Component.literal("Please connect to the Archipelago server before starting."));            return 1;        }        if (!APRandomizer.isJailPlayers() && !force) {            commandSourceCommandContext.getSource().sendFailure(Component.literal("The Dug has already begun, you're being left behind! GET DIGGING!"));            return 1;        }        if(commandSourceCommandContext.getSource().isPlayer()) {            CustomAdvancementHandler.grantAdvancement(commandSourceCommandContext.getSource().getPlayer(), new ResourceLocation(APRandomizer.MODID,"archipelago/false_start"));        }        return 1;    }    //wait for register commands event then register ourself as a command.    @SubscribeEvent    static void onRegisterCommandsEvent(RegisterCommandsEvent event) {        StartCommand.Register(event.getDispatcher());    }}